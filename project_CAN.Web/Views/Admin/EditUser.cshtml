@using System.Web.Optimization
@using System.Web.UI.WebControls
@model project_CAN.Web.Models.Admin.UserEditView
@{
    ViewBag.Title = "Edit User";
    Layout = "~/Views/Shared/_LayoutBlankPage.cshtml";
    var user = @ViewBag.user;
}

@Styles.Render("~/Content/css/admin/editUser")


<body class="userEdit">
    @using (Html.BeginForm("EditUser", "Admin", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @*@Html.HiddenFor(model => model.userId, new { value = user.userId })*@
        @Html.HiddenFor(model => model.userId, new { @Value = user.userId })
        <div class="userEditContent">

            <a href="@Url.Action("ControlUsers", "Admin")" style="color: black;"><i class="bi bi-arrow-left-square"></i></a>

            <i class="bi bi-person-circle"></i>

            <div>ID: @user.userId</div>


            <div class="userName">
                <label for="fname">Numele:</label>
                @Html.TextBoxFor(model => model.userName, new { placeholder = user.userName, id = "fname", name = "fname" })
            </div>

            <div class="gmail">
                <label for="email">Email:</label>
                @Html.TextBoxFor(model => model.email, new { placeholder = user.email, type = "email", id = "email", name = "email" })
            </div>

            <div class="pasword">
                <label for="pass">Parola:</label>
                @Html.PasswordFor(model => model.password, new { placeholder = "*****", type = "password", maxlength = "50", id = "pass", name = "pass" })
            </div>

            <div class="banedStatus">
                <label>Ban status:</label>

                @Html.RadioButtonFor(model => model.isBlocked, true, new { id = "baned" })
                <label for="baned" class="banStatus">Blocked</label><br />

                @Html.RadioButtonFor(model => model.isBlocked, false, new { id = "unBan" })
                <label for="unBan" class="banStatus">No blocked</label>
            </div>

            <div class="roleStatus">

                <label>Rolul:</label>

                <label for="User" class="role">User</label>
                @Html.RadioButtonFor(model => model.privilegies, 0, new { id = "User"})

                <label for="Mod"  class="role">Moderator</label>
                @Html.RadioButtonFor(model => model.privilegies, 1, new { id = "Mod" })

                <label for="Admin" class="role">Admin</label>
                @Html.RadioButtonFor(model => model.privilegies, 2, new { id = "Admin"})

            </div>
            
            @if (TempData["message"] != null)
            {
                <div class="alert alert-info">@TempData["message"]</div>
            }

            <button type="submit" class="btn btn-secondary btn-lg">Salvare</button>

        </div>
    }

    <script>

        document.querySelectorAll(".banStatus").forEach(function (element) {
            element.addEventListener("click", function () {
                document.querySelectorAll(".banStatus").forEach(function (el) {
                    el.style.color = "grey";
                });
                element.style.color = "red";
            });
        });


        @{
            var status = Json.Encode(ViewBag.user.isBlocked);
        }
        var banStatus = @Html.Raw(status).ToString().ToLower();
        // Function to set the checked state based on banStatus
        function setBanStatus() {
            document.querySelectorAll(".banStatus").forEach(function (el) {
                el.style.color = "grey";
            });
            if (banStatus == 1) {
                document.getElementById("baned").checked = true;
                document.querySelector('label[for="baned"]').style.color = "red";
            } else {
                document.getElementById("unBan").checked = true;
                document.querySelector('label[for="unBan"]').style.color = "red";
            }
        }

        // Call the function to initially set the ban status
        setBanStatus();


        document.querySelectorAll(".role").forEach(function (element) {
            element.addEventListener("click", function () {
                document.querySelectorAll(".role").forEach(function (el) {
                    el.style.color = "grey";
                });
                element.style.color = "red";
            });
        });



        @{
            var userPrivileges = Json.Encode(ViewBag.user.privilegies);
        }
        var privilegies = @Html.Raw(userPrivileges).ToString().ToLower();

        // Function to set the checked state based on privilegies
        function setPrivilegies() {
            document.querySelectorAll(".role").forEach(function (el) {
                el.style.color = "grey";
            });

            if (privilegies === 0) {
                document.getElementById("User").checked = true;
                document.querySelector('label[for="User"]').style.color = "red";

            } else if (privilegies === 1) {
                document.getElementById("Mod").checked = true;
                document.querySelector('label[for="Mod"]').style.color = "red";
            } else if (privilegies === 2) {
                document.getElementById("Admin").checked = true;
                document.querySelector('label[for="Admin"]').style.color = "red";
            }
        }

        // Call the function to initially set the privilegies status
        setPrivilegies();


        var alert = document.querySelector(".alert");
        var changingTrigger = document.querySelectorAll("input");
        changingTrigger.forEach(function (element) {
            element.addEventListener("input", function () {
                if (alert) {
                    alert.remove();
                }
            });
        });

    </script>

</body>